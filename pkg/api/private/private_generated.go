// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/fisabelle-lmi/oapi-discriminator-bug/pkg/api/common"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// CreatePetJSONRequestBody defines body for CreatePet for application/json ContentType.
type CreatePetJSONRequestBody = externalRef0.Pet

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Lists the pets
	// (GET /pets)
	GetPets(w http.ResponseWriter, r *http.Request)
	// Creates a new pet
	// (POST /pets)
	CreatePet(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetPets operation middleware
func (siw *ServerInterfaceWrapper) GetPets(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPets(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreatePet operation middleware
func (siw *ServerInterfaceWrapper) CreatePet(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/pets", wrapper.GetPets).Methods("GET")

	r.HandleFunc(options.BaseURL+"/pets", wrapper.CreatePet).Methods("POST")

	return r
}

type GetPetsRequestObject struct {
}

type GetPetsResponseObject interface {
	VisitGetPetsResponse(w http.ResponseWriter) error
}

type GetPets200JSONResponse externalRef0.PetList

func (response GetPets200JSONResponse) VisitGetPetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPets400JSONResponse struct{ externalRef0.N400 }

func (response GetPets400JSONResponse) VisitGetPetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetPets404JSONResponse struct{ externalRef0.N404 }

func (response GetPets404JSONResponse) VisitGetPetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPets406JSONResponse struct{ externalRef0.N406 }

func (response GetPets406JSONResponse) VisitGetPetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type GetPets500JSONResponse struct{ externalRef0.N500 }

func (response GetPets500JSONResponse) VisitGetPetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreatePetRequestObject struct {
	Body *CreatePetJSONRequestBody
}

type CreatePetResponseObject interface {
	VisitCreatePetResponse(w http.ResponseWriter) error
}

type CreatePet201JSONResponse externalRef0.Pet

func (response CreatePet201JSONResponse) VisitCreatePetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreatePet400JSONResponse struct{ externalRef0.N400 }

func (response CreatePet400JSONResponse) VisitCreatePetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreatePet404JSONResponse struct{ externalRef0.N404 }

func (response CreatePet404JSONResponse) VisitCreatePetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreatePet406JSONResponse struct{ externalRef0.N406 }

func (response CreatePet406JSONResponse) VisitCreatePetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(406)

	return json.NewEncoder(w).Encode(response)
}

type CreatePet500JSONResponse struct{ externalRef0.N500 }

func (response CreatePet500JSONResponse) VisitCreatePetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Lists the pets
	// (GET /pets)
	GetPets(ctx context.Context, request GetPetsRequestObject) (GetPetsResponseObject, error)
	// Creates a new pet
	// (POST /pets)
	CreatePet(ctx context.Context, request CreatePetRequestObject) (CreatePetResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetPets operation middleware
func (sh *strictHandler) GetPets(w http.ResponseWriter, r *http.Request) {
	var request GetPetsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPets(ctx, request.(GetPetsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPets")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPetsResponseObject); ok {
		if err := validResponse.VisitGetPetsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePet operation middleware
func (sh *strictHandler) CreatePet(w http.ResponseWriter, r *http.Request) {
	var request CreatePetRequestObject

	var body CreatePetJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePet(ctx, request.(CreatePetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreatePetResponseObject); ok {
		if err := validResponse.VisitCreatePetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xW32/bNhD+Vw63AXsRbLdNi1RvbpJtBuIf2Ly9dEF6kU4WE/FHSSqZEeh/H0jZlh07",
	"W4KlGbA3Sjzefd/dfeTdY6al0YqVd5jeo2VntHIcPzItpVaXR4NB+6U8Kx+WZEwlMvJCq/610yr8c1nJ",
	"ksLqe8sFpvhdv3Pdb3ddf+XyzFptsWmaBHN2mRUm+MIU5yWD5a81Ow8lOdCKQVuQ2jII52p2PYBgNJyN",
	"wLKvrXJAoGp5xRZ0AV84uD7ROX+BW6pqdiAU+Oi2pQa+JA/G6luRM1CeixCbKsjZk6hc7w+FTdKRP3pN",
	"8pEmKA2WM47/hfOQaVWIRW1jULgTvoyMVhxyGJ0+BP3hP6lYhO6BsoCdriru7ddKvXSF3r9iew4V1OpG",
	"6TsFkQXoLKut5bz3Gk3ZJCsa2+ocSlOKK0GR5QO0YNgDKSGpgqwi5zBBY7Vh60UrccP+JG7sHQ584plA",
	"IHYbe0yQVS0x/YzD8ezn0afRcPIDXiTol4YxReetUIsINLSEsJwH202QBJ3hLITuzuira878Vj3b5Kf3",
	"yH+SNBXH5Tp/mOLJdPLr/JfhaDK//H00PR/OR9MJJijZOVoEg5G6pUrkkJMnuCO30QkGWAVbVlmwuy5v",
	"yOXF8cfyWr17+/G4cAHFbn62Aj+9c6J9swVpvzBlLUmBZcqDTGBlCa3ZlVCLmPJ44/VwL787PPad10p8",
	"rRlEzsqLQrCF2nEOXkOl9U1tou+2f4WCSi8WIaBbOs/SHQj3oJxd7I5ispWpf6rtOp0PYUvKSqG4y8oW",
	"gVUPtqCD995WLz7SEZPp/PLH6W+T09V6NJ6dn43PJvOz0wM9u8E4Jimpel01jYfj8fD8IKq1Yg66XG3u",
	"On1JMc7YP5IJTDAX4a8UinyrWEnGhJjpfXc/PCaY7t5K1vQfsVwVpNPmckIyoN1QaRLUiqcFpp+fpNKN",
	"xydZd0ibi39d8ScW5+9Lci5cLMsuFhHku7N4ArlQ4GYTjKylZfzWfq2BgurKYzrYe/iDydYjF7QaoWy8",
	"CeV5wXaPZYtvHWSfarAXqtAhvhc+PAE4Yw9jUrRgycqHlxYTvGXrWjBvem96g9gHhhUZgSm+6w16gyBR",
	"8mXMRt9wO+Qu2qYOuYtDwijHFH9iPwv7ye4M/Pblp4t1AQ/MF1WY9nQBEWmT4Gr0PuR0g7K/NabHI0fP",
	"OHLUHvnwjCMfwpH3zwAWbOPsUktJdokpBvpuLYr21dXuQE1OLJPnWRTOasb8pPPlNyhIW4yuSb2tudlr",
	"hTffLPJuG7S88/9xB7QM45TMd/FqjGlwbIOm4z2+m5JznVEF7T4mWNsKUyy9N2m/X4W9UjufHg+OB9hc",
	"NH8FAAD//yruvZfXDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
