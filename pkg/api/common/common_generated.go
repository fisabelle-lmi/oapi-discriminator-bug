// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for AmphibianPetClass.
const (
	AmphibianPetClassAMPHIBIAN AmphibianPetClass = "AMPHIBIAN'"
)

// Defines values for ErrorCode.
const (
	ErrorCodeCONSTRAINTVIOLATION ErrorCode = "CONSTRAINT_VIOLATION"
	ErrorCodeNOTFOUND            ErrorCode = "NOT_FOUND"
	ErrorCodeNOTIMPLEMENTED      ErrorCode = "NOT_IMPLEMENTED"
)

// Defines values for MammalPetClass.
const (
	MammalPetClassMAMMAL MammalPetClass = "MAMMAL"
)

// Amphibian A pet animal class
type Amphibian struct {
	// PetClass The class of the pet
	PetClass AmphibianPetClass `json:"petClass"`
}

// AmphibianPetClass The class of the pet
type AmphibianPetClass string

// Error defines model for Error.
type Error struct {
	// ErrorCode A machine readable identifier of the error type.
	ErrorCode ErrorCode `json:"errorCode"`

	// Message A human readable message describing the issue.
	Message string `json:"message"`

	// Reference A unique identifier used to lookup the error in logging systems.
	Reference string `json:"reference"`
}

// ErrorCode A machine readable identifier of the error type.
type ErrorCode string

// Mammal A pet animal class
type Mammal struct {
	// PetClass The class of the pet
	PetClass MammalPetClass `json:"petClass"`

	// Species The species of the pet
	Species string `json:"species"`
}

// MammalPetClass The class of the pet
type MammalPetClass string

// Pet A pet
type Pet struct {
	// PetClass The class of the pet
	PetClass string `json:"petClass"`
	union    json.RawMessage
}

// PetList defines model for PetList.
type PetList struct {
	Items []Pet `json:"items"`

	// Total Total number of entities
	Total int `json:"total"`
}

// N400 defines model for 400.
type N400 = Error

// N404 defines model for 404.
type N404 = Error

// N406 defines model for 406.
type N406 = Error

// N500 defines model for 500.
type N500 = Error

// AsMammal returns the union data inside the Pet as a Mammal
func (t Pet) AsMammal() (Mammal, error) {
	var body Mammal
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMammal overwrites any union data inside the Pet as the provided Mammal
func (t *Pet) FromMammal(v Mammal) error {
	t.PetClass = "MAMMAL"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMammal performs a merge with any union data inside the Pet, using the provided Mammal
func (t *Pet) MergeMammal(v Mammal) error {
	t.PetClass = "MAMMAL"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAmphibian returns the union data inside the Pet as a Amphibian
func (t Pet) AsAmphibian() (Amphibian, error) {
	var body Amphibian
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAmphibian overwrites any union data inside the Pet as the provided Amphibian
func (t *Pet) FromAmphibian(v Amphibian) error {
	t.PetClass = "AMPHIBIAN"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAmphibian performs a merge with any union data inside the Pet, using the provided Amphibian
func (t *Pet) MergeAmphibian(v Amphibian) error {
	t.PetClass = "AMPHIBIAN"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Pet) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"petClass"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Pet) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "AMPHIBIAN":
		return t.AsAmphibian()
	case "MAMMAL":
		return t.AsMammal()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Pet) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["petClass"], err = json.Marshal(t.PetClass)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'petClass': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *Pet) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["petClass"]; found {
		err = json.Unmarshal(raw, &t.PetClass)
		if err != nil {
			return fmt.Errorf("error reading 'petClass': %w", err)
		}
	}

	return err
}

type N400JSONResponse Error

type N404JSONResponse Error

type N406JSONResponse Error

type N500JSONResponse Error

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xVTW/jNhD9K4NpgV4EJ2jTYlc3N0lRAbEdtG4v28XuWBpZTMQhl6SSBoH+e0HKn3Ec",
	"LNCFT6bJ4cx78+ZRz1gabY2wBI/5Mzr21ojn9Ofi/Dz+lEYCS4hLsrZVJQVl5OzOG4l7vmxYU1x977jG",
	"HL872+Y8G0792bVzxmHf9xlW7EunbEyCOc4bBsdfOvYBGvJghME40MYxKO879iOAGDS+LcBx6Jx4IJBO",
	"L9iBqeEzx9SXpuLP8EBtxx6UQEhpBzIQGgpgnXlQFQNVlYq1qYWKA6nWj/4R7DO8OL84Cd1EDMSA45LT",
	"vvIBSiO1WnYuVYNHFZrEYYW6guJqA/OX06qSwAagMqKlRcujQz3km6nw8ymGbizQyb2YR4GEG0xZds5x",
	"NTrFqPXZCn9y2VjbRi0UJV4vYILlACRKUwtlS95jhtYZyy6owaOWw2U6OLgciaQ7EXkaJQ6YIUunMf+A",
	"48nt78WvxXj6A37MMDxZxhx9cEqWCWFUXzmuYuymSIbechlLb++YxR2XIUo3tDt/Rv6XtG05Ldcdwxwv",
	"Z9M/53+Mi+n809/F7GY8L2ZTzFCz97SMAYU8UKsqqCgQPJLfTD9GPDU7ljLG3TX35Kv63fvmTn768f27",
	"2sfy+43ZKfwVQ5IC+x0sh1I0nSYBx1RFD8AqEoawhZJlanJ6skZ40NE9AofJO1FfOgZVsQRVK3bQea4g",
	"GGiNue9syj2MqhJozXIZC/onH1j7V8q9EHBbe0sx22nRUTXXDXyJV1PZKOFtO3aQr8ZtQBvTjnbG7sgM",
	"TGfzT7/N/pperdbF5PbmenI9nV9fvTKeGU5Ia2pP65jJeDIZ37wKZ+2KV1OuDveTfhPD3XI40gLMsFJx",
	"VyuhMLhSk7WxWHxz1uY/Zorto5SteR+JXCmx9d/TlHSEueHQZ2iEZzXmH9524ibV22FbbP3H/y3uV+pw",
	"pPs3yicF9kGoaMq9xVt0ooj9Jj05R0/pvwnrAa+pawPm5wcf6Riy83mKDkwYNtmUBF6yO+A1AFsXOSQX",
	"45XUBnPp2jZDY1nIKswx2olC44eT/r8AAAD//5jOzC9ACgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
